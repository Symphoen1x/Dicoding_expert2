# -*- coding: utf-8 -*-
"""time_series_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pBn_sNzrYPxZB55xVd8Er-lv4vlcjm2x

#Import Library
"""

#Import library
import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

"""#Prepocesing data

"""

df = pd.read_csv('raw_sales.csv')
df.head(200)

df.info()

df.isnull().sum()

date = df['datesold'].values
price = df['price'].values


plt.figure(figsize=(15, 5))
plt.plot(date[:100], price[:100])
plt.title('House Property Sales')
plt.xlabel('datesold')
plt.ylabel('price')
plt.show()

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_x, val_x, train_y, val_y = train_test_split(date, price, test_size=0.2, shuffle=False)

# Ubah bentuk train_y menjadi array 2D
train_y = train_y.reshape(-1, 1)

# Inisialisasi dan fit scaler pada data pelatihan
scaler = MinMaxScaler()
scaler.fit(train_y)

# Transformasi data menggunakan scaler
train_set = windowed_dataset(scaler.transform(train_y), window_size=60, batch_size=100, shuffle_buffer=1000)

# Ubah bentuk val_y menjadi array 2D dan transformasi data uji
val_y = val_y.reshape(-1, 1)
val_set = windowed_dataset(scaler.transform(val_y), window_size=60, batch_size=100, shuffle_buffer=1000)

"""# Building Model

"""

model = tf.keras.models.Sequential([
  # tf.keras.layers.LSTM(64)
  tf.keras.layers.LSTM(64, return_sequences=True, input_shape=(None, 1)),
  # tf.keras.layers.LSTM(32),
  tf.keras.layers.Dense(128, activation="relu"),
  tf.keras.layers.Dense(64, activation="relu"),
  tf.keras.layers.Dense(1),
])


#looking value MAE
optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-05, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

threshold_mae = (df['price'].max() - df['price'].min()) * 0.1
print('Mae: ', threshold_mae)


# callback
class stopCallBack(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if self.has_reached_accuracy(logs):
            print(' Stop training model, mae < 10% successfully')
            self.model.stop_training = True

    def has_reached_accuracy(self, logs):
        return (logs.get('mae') < 0.04  and  logs.get('val_mae') < 0.02)

callbacks = stopCallBack()
history = model.fit(train_set,
                    epochs=32,
                    validation_data = val_set,
                    callbacks = [callbacks],
                    verbose=2)

print(history.history)

print(history.history.keys())

plt.figure(figsize=(12,4))

plt.subplot(121)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()

plt.subplot(122)
plt.plot(history.history['mae'], label='Train MAE')
plt.plot(history.history['val_mae'], label='Validation MAE')
plt.legend()

plt.tight_layout()
plt.show()